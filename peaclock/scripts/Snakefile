import os
import collections
from Bio import SeqIO


##### Target rules #####

rule all:
    input:
        os.path.join(config["outdir"], "reports","cpg_counts.csv"),
        os.path.join(config["outdir"], "reports","cpg_wide.csv")


rule demultiplex:
    params:
        outdir = os.path.join(config["output_path"],"demultiplexed_reads")
    threads:
        workflow.threads
    output:
        demux_prompt = os.path.join(config["output_path"],"demultiplexed_reads", "demuxed.txt")
    run:
        if config["demultiplex"]:
            shell("""
            {config[path_to_guppy]} \
            -i {config[read_path]} \
            -s {params.outdir} \
            --arrangements_files "barcode_arrs_nb12.cfg barcode_arrs_nb24.cfg" \
            && touch {output.demux_prompt}
            """)
            config["read_path"] = params.outdir
        else:
            shell("touch {output.demux_prompt}")

rule count_cpgs:
    input:
        snakefile = os.path.join(workflow.current_basedir,"find_snps.smk"),
        demux_prompt = os.path.join(config["output_path"],"demultiplexed_reads", "demuxed.txt"),
        genes = config["genes"],
        cpg_sites = config["cpg_sites"],
        primer_sequences = config["primer_sequences"],
        matrix_file = config["matrix_file"]
    output:
        os.path.join(config["outdir"], "reports","cpg_counts.csv"),
        os.path.join(config["outdir"], "reports","cpg_wide.csv")
    run:
        barcodes = []
        for r,d,f in os.walk(config["read_path"]):
            for name in d:
                if name.startswith("barcode"):
                    print(name)
                    barcodes.append(name)
        barcode_str = ','.join(barcodes)

        shell("snakemake --nolock --snakefile {input.snakefile:q} "
                                "{config[force]} "
                                "{config[log_string]} "
                                "--directory {config[tempdir]:q} "
                                "--config "
                                f"barcode_str={barcode_str} "
                                "outdir={config[outdir]:q} "
                                "tempdir={config[tempdir]:q} "
                                "genes={input.genes:q} "
                                "cpg_sites={input.cpg_sites:q} "
                                "primer_sequences={input.primer_sequences:q} "
                                "read_path={config[read_path]:q} "
                                "--cores {workflow.cores} ")


